#!/bin/bash

BASE_DIR="$(dirname $(realpath $0))"
CHROOT="${BASE_DIR}/gentoo-stage3"

STAGE3_URL="http://ftp.rnl.tecnico.ulisboa.pt/pub/gentoo/gentoo-distfiles/releases/amd64/autobuilds"

CYAN="\e[0;36m"
RED="\e[0;31m"
NORMAL="\e[0m"

function header() {
	echo -e "\n${CYAN}  ============================================================\
============================\r  ================  ${1}  ${NORMAL}"
}

function warning() {
	echo -e "  ${RED}${1}${NORMAL}"
}

# Check if stage3 exists

if [ ! -x "${CHROOT}/sbin/init" ]; then

	warning "It seems like the stage3 is missing or in bad shape."
	warning "This is going to take a while to rebuild, but less than 5 minutes."

	rm -rf "${CHROOT}"
	mkdir "${CHROOT}"
	url="$(curl --silent "${STAGE3_URL}/latest-stage3-amd64-uclibc-vanilla.txt" | awk '/^[^#]/{print $1}')"
	stage3_url="${STAGE3_URL}/${url}"

	header "Downloading stage3"
	wget "$stage3_url" -O "${CHROOT}/stage3.tar.bz2"

	header "Extracting stage3"
	tar xf "${CHROOT}/stage3.tar.bz2" -C "${CHROOT}"
	rm "${CHROOT}/stage3.tar.bz2"


	header "Setting up base system"
	echo "Copying /etc/resolv.conf"
	cp "/etc/resolv.conf" "${CHROOT}/etc/resolv.conf"
	echo "Setting vi/vim symlinks"
	ln -s busybox "${CHROOT}/bin/vi"
	ln -s busybox "${CHROOT}/bin/vim"

	header "Setting up portage"

	mkdir "${CHROOT}/etc/portage/repos.conf" "${CHROOT}/usr/portage/"
	cp "${BASE_DIR}/helpers/make.conf" "${CHROOT}/etc/portage/"
	cp "${BASE_DIR}/helpers/gentoo-repos.conf" "${CHROOT}/etc/portage/repos.conf"

	"$0" -c "emerge-webrsync"

	header "Installing maintenance packages"

	"$0" -c "eix-sync"
	"$0" -c "emerge eix genlop gentoolkit portage-utils"

	header "Done"

elif [ -f "${CHROOT}/var/log/emerge.log" ]; then  # Check if the stage3 is too old

	lastsync=$(awk '$3 == "Sync"{ts=$1}; END{sub(":","", ts); print ts}' "${CHROOT}/var/log/emerge.log")
	lastupdate=$(awk '$2 == "***" && $3 == "emerge" && $0 ~ "--update" && $0 ~ "world" {ts=$1}; END{sub(":","", ts); print ts}' "${CHROOT}/var/log/emerge.log")
	now=$(date +%s)
	days_allowed=365

	[ -z "$lastsync" ] && lastsync=0
	[ -z "$lastupdate" ] && lastupdate=lastsync

	if (( (now - lastsync) > (days_allowed * 86400) )) || (( (now - lastupdate) > (days_allowed * 86400) )); then
		echo " ------------------------------------------------------------------------------------"
		warning "More than $days_allowed days have passed since the last portage sync and/or world update."
		warning "Either update the stage3, or delete it and run this again to generate a new one."
		warning "I refuse to run in this conditions for your own good."
		echo " ------------------------------------------------------------------------------------"
		if (( "$#" )); then
			echo "I still allow you to run $0 without arguments to enter the stage3 and update it."
			exit
		fi
	fi
fi

### Mount checks

function is_another_chroot_is_running() {
	# Yes, this is has a race-condition, but who cares in this case...
	for pid in $(pidof sh); do
		path=$(ls -ld "/proc/${pid}/root" | awk '{print $NF}')
		[ "$path" = "$CHROOT" ] && return 0
	done
	return 1
}

function mount_exists() {
	mount | grep "${CHROOT}${1}" >/dev/null
}

if ! mount_exists /proc; then
	mount -t proc /proc "${CHROOT}/proc"
fi

if ! mount_exists /dev; then
	mount -o bind /dev "${CHROOT}/dev"
fi

if ! mount_exists /sys; then
	mount -o bind /sys "${CHROOT}/sys"
fi


### Actual chroot call

export PS1="(gentoo chroot) \w $ "
chroot "${CHROOT}" /bin/sh "$@"

### Umount stuff if allowed

if [ -z "${KEEP_MOUNTS}" ] && ! is_another_chroot_is_running ; then
	umount -f "${CHROOT}/proc"
	umount -f "${CHROOT}/dev"
	umount -f "${CHROOT}/sys"
fi
