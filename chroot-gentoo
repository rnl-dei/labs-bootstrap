#!/bin/bash

BASE_DIR="$(dirname $(realpath $0))"
CHROOT="${BASE_DIR}/gentoo-stage3"
# must match the gentoo repo location used by the stage3
PORTDIR="/var/db/repos/gentoo"


STAGE3_URL="http://ftp.rnl.tecnico.ulisboa.pt/pub/gentoo/gentoo-distfiles/releases/amd64/autobuilds"

CYAN="\e[0;36m"
RED="\e[0;31m"
NORMAL="\e[0m"
BOLD="\e[1m"
REVERSE="\e[7m"

header_len=80
header_line=$(printf "=%.0s" {1..300}) # 300 '=' chars
function header() {
	# print a padded header line without using '\r' (which don't show up in CI logs)
	local title=$@
	local tlen=${#title}
	local lpad=$(((header_len - 2 - tlen)/2))
	local rpad=$(((header_len - 1 - tlen)/2))
	if test $lpad -lt 2; then
		# if the text is too big, prevent a negative/small pad
		lpad=2
		rpad=2
	fi
	printf "\n${CYAN}%*.*s %s %*.*s${NORMAL}\n" 0 "$lpad" $header_line "$title" 0 "$rpad" $header_line
}

function warning() {
	echo -e "  ${RED}${1}${NORMAL}"
}

function abort() {
	printf "  ${RED}%s[%s]:${NORMAL}" "${BASH_SOURCE[1]}" ${BASH_LINENO[0]}
	echo -e " ${RED}${REVERSE}$@${NORMAL} ${RED}Aborting...${NORMAL}"
	exit 2
}

# Check if stage3 exists

if [ ! -x "${CHROOT}/sbin/init" ]; then

	warning "It seems like the stage3 is missing or in bad shape."
	warning "This is going to take a while to rebuild, but less than 10 minutes."

	if mount | grep "${CHROOT}"; then
		abort "something is mounted inside the chroot. Unmount it first."
	fi

	rm -rf "${CHROOT}"
	mkdir "${CHROOT}"
	url="$(curl --silent "${STAGE3_URL}/latest-stage3-amd64-nomultilib.txt" | awk '/^[^#]/{print $1}')"
	stage3_url="${STAGE3_URL}/${url}"

	header "Downloading stage3"
	echo "$stage3_url" > "${CHROOT}/stage3.txt"
	wget "$stage3_url" -O "${CHROOT}/stage3.tar.bz2" --progress=dot:giga

	header "Extracting stage3"
	tar --totals --checkpoint=20000 --checkpoint-action=echo=%T -xf \
		"${CHROOT}/stage3.tar.bz2" -C "${CHROOT}" \
		|| abort "error extracting stage3"
	rm "${CHROOT}/stage3.tar.bz2"

	readlink "${CHROOT}/etc/portage/make.profile" | grep "${PORTDIR}" \
		|| abort "make.profile symlink doesn't seem to point to PORTDIR (${PORTDIR}). Will not be able to emerge packages."

	header "Setting up base system"
	echo "Copying /etc/resolv.conf"
	cp "/etc/resolv.conf" "${CHROOT}/etc/resolv.conf"
	echo "Setting vi/vim symlinks"
	ln -s busybox "${CHROOT}/bin/vi"
	ln -s busybox "${CHROOT}/bin/vim"

	header "Setting up portage"

	mkdir "${CHROOT}/etc/portage/repos.conf" "${CHROOT}${PORTDIR}"
	cp -vr ${BASE_DIR}/helpers/portage/* "${CHROOT}/etc/portage/" \
		|| abort "Failed to copy some portage files"
	test -e "${CHROOT}/etc/portage/make.conf" || abort "make.conf does not exist"
	cp "${BASE_DIR}/helpers/gentoo-repos.conf" "${CHROOT}/etc/portage/repos.conf"

	sed -i \
		-e "s|location.*=.*|location = ${PORTDIR}|g" \
		"${CHROOT}/etc/portage/repos.conf/gentoo-repos.conf" \
		|| abort "failed to update repos.conf."

	echo "\$0 is $0"

	"$0" -c "emerge-webrsync" \
		|| abort "emerge-webrsync failed. Will not be able to install required packages."
	"$0" -c "emerge --sync --quiet"

	header "mark eselect news as read"
	"$0" -c "eselect news read --quiet"

	header "Update portage"
	"$0" -c "emerge --color=y -1u portage"

	header "Updating packages for static binaries"
	echo "note: they are not really static for now; see #5"
	"$0" -c "emerge --color=y -1v net-misc/wget net-misc/openssh" \
		|| warning "wget and ssh may not be available!"

	"$0" -c "wget --version" || abort "wget is probably broken"
	header "Installing useful packages"
	"$0" -c "emerge --color=y -1 \
		sys-process/htop" \
		|| warning "some packages may not be available!"

	header "Installing maintenance packages"

	"$0" -c "emerge --color=y eix genlop gentoolkit portage-utils" \
		|| abort "error installing maintenance packages. Will not be able to lookup packages."
	"$0" -c "eix-update --force-color" \
		|| abort "eix-update failed. Will not be able to lookup packages."

	header "Done"

elif [ -f "${CHROOT}/var/log/emerge.log" ]; then  # Check if the stage3 is too old

	lastsync=$(awk '$3 == "Sync"{ts=$1}; END{sub(":","", ts); print ts}' "${CHROOT}/var/log/emerge.log")
	lastupdate=$(awk '$2 == "***" && $3 == "emerge" && $0 ~ "--update" && $0 ~ "world" {ts=$1}; END{sub(":","", ts); print ts}' "${CHROOT}/var/log/emerge.log")
	now=$(date +%s)
	days_allowed=365

	[ -z "$lastsync" ] && lastsync=0
	[ -z "$lastupdate" ] && lastupdate=lastsync

	if (( (now - lastsync) > (days_allowed * 86400) )) || (( (now - lastupdate) > (days_allowed * 86400) )); then
		echo " ------------------------------------------------------------------------------------"
		warning "More than $days_allowed days have passed since the last portage sync and/or world update."
		warning "Either update the stage3, or delete it and run this again to generate a new one."
		warning "I refuse to run in this conditions for your own good."
		echo " ------------------------------------------------------------------------------------"
		if (( "$#" )); then
			echo "I still allow you to run $0 without arguments to enter the stage3 and update it."
			exit
		fi
	fi
fi

### Mount checks

function is_another_chroot_is_running() {
	# Yes, this is has a race-condition, but who cares in this case...
	for pid in $(pidof sh); do
		path=$(ls -ld "/proc/${pid}/root" | awk '{print $NF}')
		[ "$path" = "$CHROOT" ] && return 0
	done
	return 1
}

function mount_exists() {
	mount | grep "${CHROOT}${1}" >/dev/null
}

if ! mount_exists /proc; then
	mount -t proc /proc "${CHROOT}/proc"
fi

if ! mount_exists /dev; then
	mount -o bind /dev "${CHROOT}/dev"
fi

if ! mount_exists /sys; then
	mount -o bind /sys "${CHROOT}/sys"
fi

if ! mount_exists /dev/pts; then
	mount -o bind /dev/pts "${CHROOT}/dev/pts"
fi

if ! mount_exists /dev/shm; then
	mount -o bind /dev/shm "${CHROOT}/dev/shm"
fi

# bind portage tmpfs if available in the host system
if test -e "${CHROOT}/var/tmp/portage" && mount | grep /var/tmp/portage >/dev/null; then
	mount -o bind /var/tmp/portage "${CHROOT}/var/tmp/portage"
fi

### Actual chroot call

export PS1="(gentoo chroot) \w $ "
# some packages, such as partclone, install stuff in */local/* dirs
export PATH="/usr/local/sbin:/usr/local/bin:$PATH"
chroot "${CHROOT}" /bin/sh "$@"
ret=$?

### Umount stuff if allowed

if [ -z "${KEEP_MOUNTS}" ] && ! is_another_chroot_is_running ; then
	umount -f "${CHROOT}/proc"
	umount -f "${CHROOT}/dev/pts"
	umount -f "${CHROOT}/dev/shm"
	umount -f "${CHROOT}/dev"
	umount -f "${CHROOT}/sys"
	umount -f "${CHROOT}/var/tmp/portage" -q
fi

# important so we can abort if something fails
exit $ret
