#!/bin/bash

WORK_DIR="/tmp/labs-bootstrap"
KEYMAP="/usr/share/keymaps/i386/qwerty/pt-latin1.map.gz"
TIMEZONE="Europe/Lisbon"

# busybox - base system tools
# sshd - SSH server
BASE_EXES="/bin/busybox /usr/sbin/sshd"

# Libs to allow DNS resolving that ldd does not
# show because libc loads them on-the-fly
BASE_LIBS="/lib64/libnss_dns.so.2 /lib64/libnss_files.so.2 "

CYAN="\e[0;36m"
RED="\e[0;31m"
YELLOW="\e[33m"
GRAY="\e[0;90m"
GREEN="\e[0;32m"
NORMAL="\e[0m"

function info() {
	echo -e $CYAN"$@"$NORMAL
}

function header() {
	echo -e $GREEN"$@"$NORMAL
}

function warning() {
	echo -e $RED"$@"$NORMAL
}

function quote_output() {
	while read line; do
		echo -e "  $GRAY$line$NORMAL" >&2
	done
}

function add_linked_libs() {
	local lib bin="${1}"
	for lib in $(ldd $bin | awk '/lib/{print $(NF-1)}'); do
		lib="${lib}"
		if [ ! -f lib64/$(basename $lib) ]; then
			echo "  $lib" >&2
			cp "${lib}" lib64/
		fi
	done
}

function add_libs() {
	local lib
	for lib in "$@"; do
		lib="${lib}"

		if [ ! -e $lib ]; then
			warning "$lib not found on the current system, aborting."
			exit 1
		fi

		info "Adding library $lib"
		cp "${lib}" lib64/
		add_linked_libs $lib
	done
}

function add_exe() {
	local exe
	for exe in "$@"; do
		exe="${exe}"

		if [ ! -e $exe ]; then
			warning "$exe not found on the current system, aborting."
			exit 1
		fi

		if [[ "$(ldd "${exe}")" = *"not a dynamic executable"* ]]; then
			info "Adding static executable ${exe}."
		else
			info "Adding dynamic executable ${exe}, including libs:"
			add_linked_libs $exe
		fi

		cp "${exe}" bin/
	done
}

function show_stats() {
	compressed_size=$(ls -lh "$DESTINATION" | awk '{print $5}')
	full_size=$(du -sh . | awk '{print $1}')
	file_number=$(find . -type f | wc -l)
	echo "  Compressed size: $compressed_size"
	echo "  Uncompressed size: $full_size"
	echo "  File number: $file_number"
}

###### Script starts here ######################################################

if [[ $EUID -ne 0 ]]; then
	echo "This script must be run as root"
	exit 1
fi

OWN_PATH="$(dirname $(realpath $0))"
SCRIPTS_PATH="${OWN_PATH}/scripts"

args="$@"

PKG_EXECUTABLES=()
declare -A COPY_DIRS COPY_EXTERNAL_DIRS EXTRA_FILES EXTRA_EXTERNAL_FILES

while (( "$#" )); do

	# Generic options
	# Paths given here are relative to the chroot if used
	case "$1" in
		"--inside-chroot")
			INSIDE_CHROOT=1
			;;
		"--add-exe") # Inside chroot
			PKG_EXECUTABLES+=($2)
			shift
			;;
		"--add-file") # Inside chroot
			EXTRA_FILES[$2]="$3"
			shift 2
			;;
		"--copy-dir") # Inside chroot
			COPY_DIRS["$2"]="$3"
			shift 2
			;;
		"--create-dir")
			CREATE_DIRS+=($2)
			shift
			;;
		"--initramfs")
			ACTION=initramfs
			;;
		"--package")
			ACTION=package
			;;
		*)
			# Non chroot only options
			# Every path given to these options is outside the chroot
			if [ -z "$INSIDE_CHROOT" ]; then

				# Use realpath to obtain absolute paths from relative paths.
				# It must be done here since below we will cd into the stage3
				# and any relative path will be broken.
				case "$1" in
					"--chroot")
						CHROOT="$(realpath $2)"
						shift
						;;
					"--ssh-config") # Outside chroot
						SSH_CONFIG="$(realpath $2)"
						shift
						;;
					"--ssh-host-keys-dir") # Outside chroot
						SSH_HOST_KEYS_DIR="$(realpath $2)"
						shift
						;;
					"--ssh-authorized-keys") # Outside chroot
						SSH_AUTHORIZED_KEYS="$(realpath $2)"
						shift
						;;
					"--root-password")
						ROOT_PASSWORD="$2"
						shift
						;;
					"--add-ca") # Outside chroot
						CA_CERTIFICATES+=($(realpath $2))
						shift
						;;
					"--add-external-file") # Outside chroot
						EXTRA_EXTERNAL_FILES["$(realpath $2)"]="$(realpath $3)"
						shift 2
						;;
					"--dest") # Outside chroot
						DESTINATION="$(realpath $2)"
						if [ ! "$DESTINATION" ]; then
							mkdir -p "$(dirname $2)"
							DESTINATION="$(realpath $2)"
						fi
						shift
						;;
					*)
						warning "Unknown option '$1'"
						exit 1
						;;
				esac
			fi
			;;
	esac

	shift
done

if [ -z "$ACTION" ]; then
	echo "Usage: $0 <options> (--initramfs|--package)"
	exit 1
fi

case "$ACTION" in
	initramfs)
		if [ ! "$DESTINATION" -a ! "$INSIDE_CHROOT" ]; then
			DESTINATION=$(realpath labs-bootstrap-initramfs)
		fi
		;;
	package)
		if [ ! "$DESTINATION" -a ! "$INSIDE_CHROOT" ]; then
			DESTINATION=$(realpath pkg.tar.gz)
		fi
		;;
	*)
		warning "Unknown action '$ACTION'"
		exit 1
		;;
esac

if [ -n "$INSIDE_CHROOT" ]; then
	header " --- [mk-labs-bootstrap] chroot called with: $args ---"
else
	header " --- [mk-labs-bootstrap] called with: $args ---"
fi

if [ -n "$CHROOT" ]; then

	# Check if stage3 is fine
	./chroot-gentoo -c "true" 

	# Copy this script itself to inside the chroot
	cp "$0" "${CHROOT}/init"

	# Remove --chroot <dir> from the arguments
	args2=$(echo $args | sed -e 's/--chroot \S\+//')

	# Call this script inside the chroot
	./chroot-gentoo /init --inside-chroot $args2
fi

# Change to a clean work directory
mkdir -p "$WORK_DIR"
cd "$WORK_DIR"
rm -rf *

###### Stuff to to inside the chroot if used ###################################

if [ -z "$CHROOT" ]; then

	if [ "$ACTION" = "initramfs" ]; then

		# Setup minimal system
		mkdir -p bin sbin dev etc proc sys run lib64 mnt

		add_exe $BASE_EXES
		add_libs $BASE_LIBS

		# Copy keymap
		if [ -e $KEYMAP ]; then
			info "Setting default keymap to $(basename $KEYMAP .map.gz)."
			loadkeys -b $KEYMAP > keymap.map
		else
			warning "Cannot find $KEYMAP, **not setting default keymap**."
		fi

		# Copy timezone files
		info "Setting timezone to $TIMEZONE."
		cp "/usr/share/zoneinfo/$TIMEZONE" etc/localtime
		echo "$TIMEZONE" > etc/timezone

		# Needed for "graphical" terminal things
		mkdir -p etc/terminfo/{l,x}
		cp -r /etc/terminfo/l etc/terminfo/ # Local tty terminal
		cp -r /etc/terminfo/x etc/terminfo/ # SSH from xterm
		cp -r /etc/terminfo/s etc/terminfo/ # SSH from screen

	elif [ "$ACTION" = "package" ]; then

		#if [ ${#PKG_EXECUTABLES[*]} = 0 ]; then
		#	warning "You did not pass any --exe <executable> arguments. What is my purpose then? :("
		#	exit -1
		#fi

		mkdir -p bin lib64
	fi

	# Add arbitrary executables from the chroot

	if [ ${#PKG_EXECUTABLES[*]} != 0 ]; then
		add_exe ${PKG_EXECUTABLES[*]}
	fi

	# Copy arbitrary files

	if [ ${#EXTRA_FILES[*]} != 0 ]; then
		for src_file in "${!EXTRA_FILES[@]}"; do
			dest_file="${EXTRA_FILES[$src_file]#/}" # Must remove leading "/" to copy to work dir structure
			mkdir -p $(dirname "$dest_file")
			cp -a "$src_file" "$dest_file"
		done
	fi

	# Copy directories recursively from chroot

	if [ ${#COPY_DIRS[*]} != 0 ]; then
		for src_dir in "${!COPY_DIRS[@]}"; do
			dest_dir="${COPY_DIRS[$src_dir]#/}" # Must remove leading "/" to copy to work dir structure
			mkdir -p $(dirname "$dest_dir")
			cp -ar "$src_dir" "$dest_dir"
		done
	fi
fi

if [ -n "$INSIDE_CHROOT" ]; then
	header " --- [mk-labs-bootstrap] chroot exiting ---"
	# We do not want to do anything more inside the chroot
	exit

elif [ -n "$CHROOT" ]; then
	# Copy the result from inside the chroot to the current work dir
	cp -ar ${CHROOT}/${WORK_DIR}/* "${WORK_DIR}"
fi

###### Stuff to to outside the chroot for both initramfs and packages ##########

# Copy arbitrary external files

if [ ${#EXTRA_EXTERNAL_FILES[*]} != 0 ]; then
	for src_file in "${!EXTRA_EXTERNAL_FILES[@]}"; do
		dest_file="${EXTRA_EXTERNAL_FILES[$src_file]#/}" # Must remove leading "/" to copy to work dir structure
		mkdir -p $(dirname "$dest_file")
		cp -a "$src_file" "$dest_file"
	done
fi

# Create empty directories

if [ ${#CREATE_DIRS[*]} != 0 ]; then
	for new_dir in "${CREATE_DIRS[@]#/}"; do
		mkdir -p "$new_dir"
	done
fi

### Stuff to do outside the chroot only for packages

if [ "$ACTION" = "package" ]; then
	info "Creating package archive $DESTINATION"
	tar cvzf "$DESTINATION" -C "${WORK_DIR}" . | quote_output
	info "Done"
	show_stats
	exit # package creation terminates the script here
fi

###### Stuff to to outside the chroot only for initramfs #######################

# Enable root login

info "Setting root user and password."
echo "root:x:0:0:root:/root:/bin/sh" > etc/passwd

if [ -n "$ROOT_PASSWORD" ]; then
	hashed_password=$(echo "$ROOT_PASSWORD" | openssl passwd -1 -stdin)
else
	hashed_password="!"
	warning "Root password not defined. You will not be able to login locally!"
fi

echo "root:$hashed_password:0:0:::::" > etc/shadow


# busybox dhcp client helper script
mkdir -p usr/share/udhcpc
cp ${SCRIPTS_PATH}/dhcp_script.sh usr/share/udhcpc/default.script

# Needed to accept SSH connections

info "Copying ssh keys."
mkdir -p root/.ssh etc/ssh var/empty
echo "sshd:x:22:22:sshd:/var/empty:/sbin/nologin" >> etc/passwd

if [ -n "$SSH_AUTHORIZED_KEYS" ]; then
	cp "$SSH_AUTHORIZED_KEYS" root/.ssh/authorized_keys
else
	warning "No SSH authorized_keys given. You will not be able to SSH in the initramfs!"
fi

if [ -n "$SSH_HOST_KEYS_DIR" ]; then
	cp ${SSH_HOST_KEYS_DIR}/ssh_host_* etc/ssh/
	chmod 600 etc/ssh/ssh_host_*
else
	warning "No SSH host keys given. Shit will happen!"
fi

if [ -n "$SSH_CONFIG" ]; then
	cat "${SSH_CONFIG}" | grep -v UsePAM > etc/ssh/sshd_config
else
	warning "No SSH config given. Shit will happen!"
fi

# Copy CA certificates

if [ ${#CA_CERTIFICATES[*]} != 0 ]; then
	mkdir -p etc/ssl/certs
	for cert_file in ${CA_CERTIFICATES[*]}; do
		cert_name=$(basename $cert_file)
		cp $cert_file etc/ssl/certs/
		cert_hash=$(openssl x509 -hash -noout -in "${cert_file}")".0"
		ln -s "${cert_name}" "etc/ssl/certs/${cert_hash}"
	done
fi

# Copy package install script
cp ${SCRIPTS_PATH}/emerge.sh bin/emerge
chmod +x bin/emerge

# Copy shutdown scripts
cp ${SCRIPTS_PATH}/reboot.sh bin/reboot
chmod +x bin/reboot
cp ${SCRIPTS_PATH}/poweroff.sh bin/poweroff
chmod +x bin/poweroff
cp ${SCRIPTS_PATH}/poweroff.sh bin/shutdown
chmod +x bin/shutdown

# Copy /etc/profile
cp ${SCRIPTS_PATH}/profile.sh etc/profile

# Copy init script
cp ${SCRIPTS_PATH}/init.sh init
chmod +x init

###### Finishing initramfs creation ############################################

info "Creating initramfs archive on $DESTINATION"
(find . -print0 | cpio --null -ov --format=newc | gzip -9 > "$DESTINATION") 2>&1 | quote_output
info "Done"

show_stats
