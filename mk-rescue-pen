#!/bin/bash

DEV="$1"

if [[ ! "$DEV" =~ ^/dev/sd.$ ]]; then
	echo "Must give a device like /dev/sdx as an argument."
	exit
fi

if [[ "$DEV" == /dev/sda ]]; then
	echo "I will not accept /dev/$DEV because it will almost certainly" \
	     "not be what you want to do..."
	exit
fi

if [ ! -b "$DEV" ]; then
	echo "$DEV is not a block device."
	exit
fi

URL=$(curl -sI "https://sourceforge.net/projects/systemrescuecd/files/latest/download?source=files" \
     | awk '$1 == "Location:"{print $2}')

if [[ ! "$URL" ]]; then
	echo "Oops, could not get systemrescuecd URL. Try again maybe?"
	exit 1
fi

FILE=$(basename ${URL%\?*})

if [ ! -f "$FILE" ]; then
	echo "$FILE not found, downloading..."
	wget "$URL" -O "$FILE"

	if [[ $? != 0 ]]; then
		echo "Oops, could not download systemrescurcd URL."
		exit 1
	fi

fi

if [[ $EUID -ne 0 ]]; then
	echo "This script must be run as root below this point"
	exit 1
fi

SYSDIR="/mnt/systemrescuecd"

mkdir -p $SYSDIR
mount -o loop,exec "$FILE" $SYSDIR
cd $SYSDIR

# On a normal usage the systemrescue usb_inst.sh script is called without arguments
# but here we call each step manually to specify the given device.
# Details on http://www.system-rescue-cd.org/Installing-SystemRescueCd-on-a-USB-stick D)

if ./usb_inst.sh listdev | grep $DEV; then
	echo "Ok, $DEV is a removable device."
else
	echo "usb_inst.sh did not detect $DEV as a removable device, quitting."
	exit
fi

PART="${DEV}1"

./usb_inst.sh writembr $DEV
./usb_inst.sh format $PART
./usb_inst.sh copyfiles $PART
./usb_inst.sh syslinux $PART

cd $OLDPWD
umount $SYSDIR

mount $PART $SYSDIR

if [ ! -f ${SYSDIR}/sysrcd.dat ]; then
	echo "sysrcd.dat not found. Probably something went wrong creating or mounting the usb pen."
	exit 1
fi

echo "Copying kernel and initramfs to usb pen..."
cp labs-bootstrap-kernel ${SYSDIR}/syslinux
cp labs-bootstrap-initramfs ${SYSDIR}/syslinux

# Add our own entry to the boot menu
patch ${SYSDIR}/syslinux/syslinux.cfg helpers/syslinux.cfg.patch

umount $SYSDIR
sync
echo "Done :D"
